{"version":3,"sources":["logo.svg","components/Header.jsx","components/Sidebar.jsx","components/Task.jsx","components/Content.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","alt","Sidebar","selectedTab","setSelectedTab","console","log","onClick","icon","faInbox","faCalendarWeek","faEnvelopeOpenText","FORMAT","formatDate","date","format","locale","dateFnsFormat","AddTask","onAddTask","onCancel","useState","task","setTask","setDate","value","onChange","event","target","disabled","onDayChange","day","placeholder","Date","dayPickerProps","modifiers","before","Task_Mapping","INBOX","TODAY","NEXT7","TaskItems","tasks","length","map","id","text","filter","isAfter","isBefore","addDays","isToday","Task","showTask","setShowTask","setTasks","newTaskItem","Content","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8cc97ac6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\n\nfunction Header() {\n\treturn (\n\t\t<header className=\"header\">\n\t\t\t<nav>\n\t\t\t\t<div className=\"logo\">\n\t\t\t\t\t<img src=\"\" alt=\"Todoist logo\"></img>\n\t\t\t\t</div>\n\t\t\t</nav>\n\n\t\t</header>\n\t)\n}\n\nexport default Header\n","import React from 'react'\n// import { FaInbox} from from 'react-icons/fa';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCoffee, faInbox, faCalendarWeek, faEnvelopeOpenText } from '@fortawesome/free-solid-svg-icons'\n\n\n\n\nfunction Sidebar({ selectedTab, setSelectedTab }) {\n\n\tconsole.log({ selectedTab });\n\n\n\treturn (\n\t\t<div className=\"sidebar\">\n\n\t\t\t<div className={selectedTab === 'INBOX' ? `active` : ''} onClick={() => setSelectedTab(\"INBOX\")}><FontAwesomeIcon icon={faInbox} />Inbox</div>\n\t\t\t<div className={selectedTab === 'TODAY' ? `active` : ''} onClick={() => setSelectedTab(\"TODAY\")} ><FontAwesomeIcon icon={faCalendarWeek} />Today</div>\n\t\t\t<div className={selectedTab === 'NEXT7' ? `active` : ''} onClick={() => setSelectedTab(\"NEXT7\")} ><FontAwesomeIcon icon={faEnvelopeOpenText} />Next 7 Days</div>\n\t\t</div>\n\t)\n}\n\nexport default Sidebar\n","import React, { useState } from 'react'\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport 'react-day-picker/lib/style.css';\nimport dateFnsFormat from 'date-fns/format';\nimport { addDays, isAfter, isBefore, isToday } from 'date-fns'\n\n\n\n\n\nconst FORMAT = \"dd/MM/yyyy\";\n\nfunction formatDate(date, format, locale) {\n\treturn dateFnsFormat(date, format, { locale });\n}\n\nconst AddTask = ({ onAddTask, onCancel }) => {\n\tconst [task, setTask] = useState(\"\");\n\tconst [date, setDate] = useState(null);\n\treturn (\n\t\t<div className=\"add-task-dialog\">\n\t\t\t<input value={task} onChange={(event) => setTask(event.target.value)} />\n\t\t\t<div className=\"add-task-actions\">\n\n\t\t\t\t<div className=\"btns-container\">\n\t\t\t\t\t<button disabled={!task} className=\"add-btn\" onClick={() => { onAddTask(task, date); setTask(\"\") }}>ADD</button>\n\t\t\t\t\t<button className=\"cancel-btn\" onClick={() => { onCancel(); setTask(\"\") }} >CANCEL</button>\n\n\t\t\t\t</div>\n\t\t\t\t<div className=\"icons-container\">\n\t\t\t\t\t<DayPickerInput\n\t\t\t\t\t\tonDayChange={(day) => setDate(day)}\n\t\t\t\t\t\tplaceholder={`${dateFnsFormat(new Date(), FORMAT)}`}\n\t\t\t\t\t\tformatDate={formatDate}\n\t\t\t\t\t\tformat={FORMAT}\n\t\t\t\t\t\tdayPickerProps={\n\t\t\t\t\t\t\t{ modifiers: { disabled: [{ before: new Date() }], } }\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t</div>\n\t)\n}\n\nconst Task_Mapping = {\n\tINBOX: \"Inbox\",\n\tTODAY: \"Today\",\n\tNEXT7: \"Next 7 Days\",\n};\n\nconst TaskItems = ({ selectedTab, tasks }) => {\n\n\tconsole.log(selectedTab);\n\tconsole.log(tasks);\n\n\n\tif (selectedTab === \"INBOX\") {\n\t\treturn (\n\n\t\t\ttasks.length > 0 ? tasks.map((task) => <div className=\"inbx\">\n\n\t\t\t\t<span id='spn1'>{task.text}</span>   <span>{dateFnsFormat(new Date(task.date), FORMAT)}</span>\n\t\t\t</div>) : <p>NO TASKS YET</p>\n\n\t\t)\n\t}\n\n\n\n\tif (selectedTab === \"NEXT7\") {\n\t\treturn (tasks.filter(\n\t\t\t(task) => isAfter(task.date, new Date()) && isBefore(task.date, addDays(new Date(), 7))\n\n\t\t).map((task) => (\n\t\t\t<p>\n\t\t\t\t{task.text}  {dateFnsFormat(new Date(task.date), FORMAT)} {\" \"}\n\t\t\t</p>\n\t\t)));\n\n\t}\n\n\n\tif (selectedTab === \"TODAY\") {\n\t\treturn tasks.filter(\n\t\t\t(task) => isToday(task.date)\n\t\t).map(\n\t\t\t(task) => (\n\n\n\t\t\t\t<div className=\"tdy\">\n\n\t\t\t\t\t<span id='spn1'>{task.text}</span>   <span>{dateFnsFormat(new Date(task.date), FORMAT)}</span>\n\t\t\t\t</div>\n\n\t\t\t)\n\t\t);\n\t}\n\n}\n\n\n\n\nfunction Task({ selectedTab }) {\n\n\tconst [showTask, setShowTask] = useState(false);\n\tconst [tasks, setTasks] = useState([]);\n\n\tconst addNewTask = (text, date) => {\n\t\tconsole.log(\"text :\" + text);\n\t\tconsole.log(\"date: \" + date);\n\t\tconst newTaskItem = { text, date: date || new Date() }\n\t\tsetTasks([...tasks, newTaskItem]);\n\t};\n\n\treturn (\n\t\t<div className=\"task\">\n\t\t\t<h2>{Task_Mapping[selectedTab]}</h2>\n\n\t\t\t<div className=\"add-task-btn\" onClick={() => setShowTask(!showTask)}>\n\t\t\t\t<span className=\"plus\">+</span>\n\t\t\t\t<span className=\"add-task-text\"> ADD TASK</span>\n\t\t\t</div>\n\n\t\t\t{showTask && <AddTask onAddTask={addNewTask} onCancel={() => setShowTask(false)} />}\n\n\n\t\t\t{/* \n\t\t\t{tasks.length > 0 ? tasks.map((task) => <p>\n\t\t\t\t{task.text}\n\t\t\t\t{dateFnsFormat(new Date(task.date), FORMAT)}\n\t\t\t</p>) : <p>NO TASKS YET</p>} */}\n\n\n\n\t\t\t{tasks.length > 0 ? (\n\t\t\t\t<TaskItems tasks={tasks} selectedTab={selectedTab} />\n\n\t\t\t) : (<p>NO TASKS</p>)}\n\t\t</div>\n\n\n\t);\n};\n\nexport default Task\n","import React, { useState } from 'react'\nimport Sidebar from './Sidebar'\nimport Task from './Task'\n\nfunction Content() {\n\tconst [selectedTab, setSelectedTab] = useState(\"INBOX\");\n\treturn (\n\t\t<section className=\"content\">\n\n\t\t\t<Sidebar selectedTab={selectedTab} setSelectedTab={setSelectedTab} />\n\t\t\t<Task selectedTab={selectedTab} />\n\t\t</section>\n\n\n\t)\n}\n\nexport default Content\n","import logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header';\nimport Content from './components/Content';\n\nfunction App() {\n  return (\n    <div>\n      <Header/>\n      <Content/>\n      this is div\n  \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}